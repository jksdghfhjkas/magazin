
services:
  web: 
    build: ./jd
    container_name: web
    command: bash -c "python jd/manage.py makemigrations && 
              python jd/manage.py migrate &&
              python jd/manage.py runserver 0.0.0.0:8000"
    env_file:
      - .env
    ports:
      - 8000:8000
    volumes: 
      - .:/app
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started

  db:
    image: postgres:17-alpine
    container_name: db
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${DB}
      POSTGRES_USER: ${USER}
      POSTGRES_PASSWORD: ${PASSWORD}
    ports: 
      - 5432:5432
    volumes:
      - data:/var/lib/postgresql/data/
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${USER} -d ${DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis
    container_name: redis
    ports:
      - 6379:6379
    volumes:
      - redis_data:/data

  celery:
    build: ./jd
    container_name: celery
    command: bash -c "celery -A jd worker -l info"
    env_file:
      - .env
    depends_on: 
      - web

  scheduler:
    build: ./jd
    container_name: scheduler
    command: bash -c "celery -A jd beat -l info"
    env_file:
      - .env
    depends_on:
      - web

  flower:
    build: ./jd
    container_name: flower
    command: bash -c "celery -A jd flower --port=5555 --host=0.0.0.0"
    ports:
      - 5555:5555
    env_file:
      - .env
    depends_on:
      - web

  # auth
  api:
    build: ./auth-bot-fastapi
    container_name: api
    command: bash -c "uvicorn api:app --reload --port 8001 --host 0.0.0.0"
    ports: 
      - 8001:8001
    env_file:
      - auth-bot-fastapi/.env

  # api:
  #   build: ./auth-bot-fastapi
  #   container_name: api
  #   command: bash -c "python api.py"
  #   ports:
  #     - 8001:8001
  #   env_file:
  #     - auth-bot-fastapi/.env
  
  # bot: 
  #   build: ./auth-bot-fastapi
  #   container_name: bot
  #   command: bash -c "python bot.py"
  #   env_file:
  #     - auth-bot-fastapi/.env


volumes: 
  data:
  redis_data: